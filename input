// TODO:
//- Botar registrador e deslocamento da variavel na tabela (endereco da variavel). P/ isso, adicionar argumento no
//table_add_entry indicando qual eh o reg (rfp, rbss). Manter contadores globais de deslocamento desses regs durante a
//compilacao.
//- Na hora de chamar op_new() dentro do parser, ja saberemos onde na memoria estara cada variavel gracas ao item anterior.



int x, y, z;

int main() {
    x = 2;
    y = 4;
}
// storeAI 2 => rbss, 0
// storeAI 4 => rbss, 4

/*int aa;
int B() {
    int ba;
    float bb;
    if(true) then{
        int ca;
    };
    while(true) {int da;};
    char bc;
}*/



// int mock(){
//     int b, a<=1;
//     b = 1+a;
//     if (b == 2) then {
//         int result;
//         result = b * (a+3);
//         b = result;
//     };
//     a = b*8;
// }


/*int i;
float h[1^2^3];
char ch;
bool isFalse, isTrue;

int a;
char cfunc(){
    a = 5;
    return 'c';
}

int bar(float param, bool outroParam){
    float x, y;
    int a, b, c<=1, d;
    char teste;

    // TESTES DE ERROS:
    //int i;
    //bool aaa <= 'a';
    //int aaa <= 'a';
    //float aaa <= 'a';
    //a = 'd';
    //a = cfunc();
    //char chr <= 2.75;
    //teste = 1;
    //h = 5;
    //h();
    //h(2, 5);
    //x();
    //x(1,2,3);
    //x[1] = 3;
    //h[5] = '2';
    //return 'l';
    //if('c') then {};
    //while('c') {};
    //while('1'||2.5){};
    //while('1'&&2){};
    //while(1=='2'){};
    //while('1'!=2){};
    //while('1'<2){};
    //while(1>'2'){};
    //while('1'<=2){};
    //while(1>='2'){};
    //while(1+'2'){};
    //while(true-'2'){};
    //while(1*'2'){};
    //while(1/'2'){};
    //while(1%'2'){};
    //teste = -'c';
    //teste = !'c';
    //while(h||2.5){};
    //teste = !h;

    h[5] = 2; // Isso deve funcionar, atribuindo a uma posição

    if(c == 1) then {
        int result;
        c = c + 1;
        result = c;
    };
    a = 1;

    int idx <= 0;
    while(idx<3) {idx = idx + 1;};


    a = (100+10)/10+1;

    b = c+a;

    y = bar(x,outroParam);

    x=y;

    // h[i+2^b^c] = d;
}*/


// int b[1^2];
// int foo(){ 
//     int c <= 3, ca <= 4, d<=6;
//     float x <= 2.2;
//     int a;
//     a = 1;
//     b[0^1] = 0;
//     return b[1^a+c];
// }

// float x;

// int goo(float x){ 
//     int a <= 1;
//     goo(x);
// }

// int hoo(){
//     int b;
// }

// int joo(){}

// int f(){
//     char a <= 'A';
// }